// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositoryv1/iface.go

// Package repositoryv1mock is a generated GoMock package.
package repositoryv1mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/lovemew67/leader-board/gen/go/proto"
)

// MockScoreV1Repository is a mock of ScoreV1Repository interface.
type MockScoreV1Repository struct {
	ctrl     *gomock.Controller
	recorder *MockScoreV1RepositoryMockRecorder
}

// MockScoreV1RepositoryMockRecorder is the mock recorder for MockScoreV1Repository.
type MockScoreV1RepositoryMockRecorder struct {
	mock *MockScoreV1Repository
}

// NewMockScoreV1Repository creates a new mock instance.
func NewMockScoreV1Repository(ctrl *gomock.Controller) *MockScoreV1Repository {
	mock := &MockScoreV1Repository{ctrl: ctrl}
	mock.recorder = &MockScoreV1RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreV1Repository) EXPECT() *MockScoreV1RepositoryMockRecorder {
	return m.recorder
}

// CleanScores mocks base method.
func (m *MockScoreV1Repository) CleanScores() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanScores")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanScores indicates an expected call of CleanScores.
func (mr *MockScoreV1RepositoryMockRecorder) CleanScores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanScores", reflect.TypeOf((*MockScoreV1Repository)(nil).CleanScores))
}

// InsertScore mocks base method.
func (m *MockScoreV1Repository) InsertScore(arg0 *proto.ScoreV1) (*proto.ScoreV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertScore", arg0)
	ret0, _ := ret[0].(*proto.ScoreV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertScore indicates an expected call of InsertScore.
func (mr *MockScoreV1RepositoryMockRecorder) InsertScore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertScore", reflect.TypeOf((*MockScoreV1Repository)(nil).InsertScore), arg0)
}

// ListTopKHighestScores mocks base method.
func (m *MockScoreV1Repository) ListTopKHighestScores(limit int) ([]*proto.ScoreV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopKHighestScores", limit)
	ret0, _ := ret[0].([]*proto.ScoreV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopKHighestScores indicates an expected call of ListTopKHighestScores.
func (mr *MockScoreV1RepositoryMockRecorder) ListTopKHighestScores(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopKHighestScores", reflect.TypeOf((*MockScoreV1Repository)(nil).ListTopKHighestScores), limit)
}

// MockScoreV1CacheRepository is a mock of ScoreV1CacheRepository interface.
type MockScoreV1CacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScoreV1CacheRepositoryMockRecorder
}

// MockScoreV1CacheRepositoryMockRecorder is the mock recorder for MockScoreV1CacheRepository.
type MockScoreV1CacheRepositoryMockRecorder struct {
	mock *MockScoreV1CacheRepository
}

// NewMockScoreV1CacheRepository creates a new mock instance.
func NewMockScoreV1CacheRepository(ctrl *gomock.Controller) *MockScoreV1CacheRepository {
	mock := &MockScoreV1CacheRepository{ctrl: ctrl}
	mock.recorder = &MockScoreV1CacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreV1CacheRepository) EXPECT() *MockScoreV1CacheRepositoryMockRecorder {
	return m.recorder
}

// CleanTopKScores mocks base method.
func (m *MockScoreV1CacheRepository) CleanTopKScores() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanTopKScores")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanTopKScores indicates an expected call of CleanTopKScores.
func (mr *MockScoreV1CacheRepositoryMockRecorder) CleanTopKScores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanTopKScores", reflect.TypeOf((*MockScoreV1CacheRepository)(nil).CleanTopKScores))
}

// GetTopKScores mocks base method.
func (m *MockScoreV1CacheRepository) GetTopKScores() ([]*proto.ScoreV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopKScores")
	ret0, _ := ret[0].([]*proto.ScoreV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopKScores indicates an expected call of GetTopKScores.
func (mr *MockScoreV1CacheRepositoryMockRecorder) GetTopKScores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopKScores", reflect.TypeOf((*MockScoreV1CacheRepository)(nil).GetTopKScores))
}

// SetTopKScores mocks base method.
func (m *MockScoreV1CacheRepository) SetTopKScores(arg0 []*proto.ScoreV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTopKScores", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTopKScores indicates an expected call of SetTopKScores.
func (mr *MockScoreV1CacheRepositoryMockRecorder) SetTopKScores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopKScores", reflect.TypeOf((*MockScoreV1CacheRepository)(nil).SetTopKScores), arg0)
}
